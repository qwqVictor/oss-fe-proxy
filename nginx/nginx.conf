# nginx.conf for OSS Frontend Proxy

worker_processes auto;
error_log /dev/stderr %ENV_LOG_LEVEL%;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    init_worker_by_lua_block {
        local ok, crd_watcher = pcall(require, "crd_watcher")
        if ok and crd_watcher and crd_watcher.init then
            crd_watcher.init()
        else
            ngx.log(ngx.ERR, "crd_watcher.init() 初始化失败")
        end
    }
    include       /usr/local/openresty/nginx/conf/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log %ENV_ACCESS_LOG_FILE% main;

    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Lua 包路径
    lua_package_path "/usr/local/openresty/lua/?.lua;;";
    lua_shared_dict cache 10m;
    lua_shared_dict metrics 20m;
    lua_shared_dict counters 10m;
    lua_shared_dict crd_cache 20m;

    # 解析器设置
    resolver kube-dns.kube-system.svc.cluster.local valid=30s;
    resolver_timeout 5s;

    # 主服务器配置
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # 安全头部
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # 主要代理逻辑
        location / {
            # 使用 Lua 脚本处理请求
            content_by_lua_block {
                local oss_proxy = require "oss_proxy"
                oss_proxy.handle_request()
            }
        }


    }

    server {
        listen 9181;

        location /healthz {
            access_log off;
            content_by_lua_block {
                local crd_watcher = require "crd_watcher"
                if not crd_watcher.is_ready() then
                    ngx.status = 503
                    ngx.say("not ready")
                    return
                end
                ngx.say("OK")
            }
        }

        # 指标端点
        location /metrics {
            access_log off;
            content_by_lua_file /usr/local/openresty/lua/metrics_output.lua;
            add_header Content-Type text/plain;
        }

    }

    server {
        listen 127.0.0.1:9180;
        location = / {
            return 200 'go to /api';
        }
        # API 端点供 Go watcher 调用
        location /api/ {
            access_log off;
            
            # 验证内部 API 认证
            access_by_lua_block {
                local api_key_file = "/tmp/api.key"
                local file = io.open(api_key_file, "r")
                if not file then
                    ngx.log(ngx.ERR, "Failed to read API key file: " .. api_key_file)
                    ngx.status = 500
                    ngx.say("Internal server error")
                    ngx.exit(500)
                end
                
                local expected_key = file:read("*line")
                file:close()
                
                if not expected_key or expected_key == "" then
                    ngx.log(ngx.ERR, "API key is empty")
                    ngx.status = 500
                    ngx.say("Internal server error")
                    ngx.exit(500)
                end
                
                local provided_key = ngx.var.http_x_api_key
                if not provided_key or provided_key ~= expected_key then
                    ngx.log(ngx.WARN, "API authentication failed from " .. (ngx.var.remote_addr or "unknown"))
                    ngx.status = 401
                    ngx.say("Unauthorized")
                    ngx.exit(401)
                end
            }
            
            # 更新路由
            location ~ ^/api/routes/update$ {
                content_by_lua_block {
                    local crd_watcher = require "crd_watcher"
                    local json = require "cjson"
                    
                    if ngx.var.request_method ~= "POST" then
                        ngx.status = 405
                        ngx.say("Method not allowed")
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("Missing request body")
                        return
                    end
                    
                    local ok, route_data = pcall(json.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say("Invalid JSON")
                        return
                    end
                    
                    local success, err = crd_watcher.update_route(route_data)
                    if not success then
                        ngx.status = 400
                        ngx.say(err or "Update failed")
                        return
                    end
                    
                    ngx.say("OK")
                }
            }
            
            # 删除路由
            location ~ ^/api/routes/delete$ {
                content_by_lua_block {
                    local crd_watcher = require "crd_watcher"
                    local json = require "cjson"
                    
                    if ngx.var.request_method ~= "POST" then
                        ngx.status = 405
                        ngx.say("Method not allowed")
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("Missing request body")
                        return
                    end
                    
                    local ok, route_data = pcall(json.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say("Invalid JSON")
                        return
                    end
                    
                    local success, err = crd_watcher.delete_route(route_data)
                    if not success then
                        ngx.status = 400
                        ngx.say(err or "Delete failed")
                        return
                    end
                    
                    ngx.say("OK")
                }
            }
            
            # 更新 upstream
            location ~ ^/api/upstreams/update$ {
                content_by_lua_block {
                    local crd_watcher = require "crd_watcher"
                    local json = require "cjson"
                    
                    if ngx.var.request_method ~= "POST" then
                        ngx.status = 405
                        ngx.say("Method not allowed")
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("Missing request body")
                        return
                    end
                    
                    local ok, upstream_data = pcall(json.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say("Invalid JSON")
                        return
                    end
                    
                    local success, err = crd_watcher.update_upstream(upstream_data)
                    if not success then
                        ngx.status = 400
                        ngx.say(err or "Update failed")
                        return
                    end
                    
                    ngx.say("OK")
                }
            }
            
            # 删除 upstream
            location ~ ^/api/upstreams/delete$ {
                content_by_lua_block {
                    local crd_watcher = require "crd_watcher"
                    local json = require "cjson"
                    
                    if ngx.var.request_method ~= "POST" then
                        ngx.status = 405
                        ngx.say("Method not allowed")
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("Missing request body")
                        return
                    end
                    
                    local ok, upstream_data = pcall(json.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say("Invalid JSON")
                        return
                    end
                    
                    local success, err = crd_watcher.delete_upstream(upstream_data)
                    if not success then
                        ngx.status = 400
                        ngx.say(err or "Delete failed")
                        return
                    end
                    
                    ngx.say("OK")
                }
            }
            
            # 更新 secret
            location ~ ^/api/secrets/update$ {
                content_by_lua_block {
                    local crd_watcher = require "crd_watcher"
                    local json = require "cjson"
                    
                    if ngx.var.request_method ~= "POST" then
                        ngx.status = 405
                        ngx.say("Method not allowed")
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("Missing request body")
                        return
                    end
                    
                    local ok, secret_data = pcall(json.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say("Invalid JSON")
                        return
                    end
                    
                    local success, err = crd_watcher.update_secret(secret_data)
                    if not success then
                        ngx.status = 400
                        ngx.say(err or "Update failed")
                        return
                    end
                    
                    ngx.say("OK")
                }
            }
            
            # 删除 secret
            location ~ ^/api/secrets/delete$ {
                content_by_lua_block {
                    local crd_watcher = require "crd_watcher"
                    local json = require "cjson"
                    
                    if ngx.var.request_method ~= "POST" then
                        ngx.status = 405
                        ngx.say("Method not allowed")
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say("Missing request body")
                        return
                    end
                    
                    local ok, secret_data = pcall(json.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say("Invalid JSON")
                        return
                    end
                    
                    local success, err = crd_watcher.delete_secret(secret_data)
                    if not success then
                        ngx.status = 400
                        ngx.say(err or "Delete failed")
                        return
                    end
                    
                    ngx.say("OK")
                }
            }
            

        }
    }
}