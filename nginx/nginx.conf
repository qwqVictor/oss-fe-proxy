# nginx.conf for OSS Frontend Proxy

worker_processes auto;
error_log /dev/stderr %ENV_LOG_LEVEL%;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    init_worker_by_lua_block {
        local ok, crd_watcher = pcall(require, "crd_watcher")
        if ok and crd_watcher and crd_watcher.init then
            crd_watcher.init()
        else
            ngx.log(ngx.ERR, "crd_watcher.init() 初始化失败")
        end
    }
    include       /usr/local/openresty/nginx/conf/mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log %ENV_ACCESS_LOG_FILE% main;

    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Lua 包路径
    lua_package_path "/usr/local/openresty/lua/?.lua;;";
    lua_shared_dict cache 10m;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.addn.crt;

    # 解析器设置
    resolver kube-dns.kube-system.svc.cluster.local valid=30s;
    resolver_timeout 5s;

    # 主服务器配置
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # 安全头部
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # 健康检查端点
        location /health {
            access_log off;
            content_by_lua_block {
                local crd_watcher = require "crd_watcher"
                if not crd_watcher.is_ready() then
                    ngx.status = 503
                    ngx.say("not ready")
                    return
                end
                ngx.say("OK")
            }
        }

        # 指标端点
        location /metrics {
            access_log off;
            content_by_lua_block {
                ngx.say("# HELP nginx_connections_active Active connections")
                ngx.say("# TYPE nginx_connections_active gauge")
                ngx.say("nginx_connections_active ", ngx.var.connections_active)
                
                ngx.say("# HELP nginx_connections_reading Reading connections")
                ngx.say("# TYPE nginx_connections_reading gauge")
                ngx.say("nginx_connections_reading ", ngx.var.connections_reading)
                
                ngx.say("# HELP nginx_connections_writing Writing connections")
                ngx.say("# TYPE nginx_connections_writing gauge")
                ngx.say("nginx_connections_writing ", ngx.var.connections_writing)
                
                ngx.say("# HELP nginx_connections_waiting Waiting connections")
                ngx.say("# TYPE nginx_connections_waiting gauge")
                ngx.say("nginx_connections_waiting ", ngx.var.connections_waiting)
            }
            add_header Content-Type text/plain;
        }

        # 主要代理逻辑
        location / {
            # 使用 Lua 脚本处理请求
            content_by_lua_block {
                local oss_proxy = require "oss_proxy"
                oss_proxy.handle_request()
            }
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/local/openresty/nginx/html;
        }
    }
}